








//
//
//
//
//    @Autowired
//    private JwtAuthenticationFilter jwtRequestFilter;
//
//
//     protected void configure(HttpSecurity http) throws Exception {
//
//        http.csrf().disable().cors()
//                .configurationSource(corsConfigurationSource()).and().authorizeRequests().requestMatchers("auth/signup").permitAll().anyRequest().authenticated()
//                .and()
//                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
//                .and()
//                .addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
//    }
//
//    @Bean
//    public CorsConfigurationSource corsConfigurationSource() {
//        CorsConfiguration configuration = new CorsConfiguration();
//        configuration.setAllowedOrigins(Arrays.asList("*"));
//        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
//        configuration.setAllowedHeaders(Arrays.asList("authorization", "content-type", "x-auth-token"));
//        configuration.setExposedHeaders(Arrays.asList("x-auth_token"));
//        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
//        source.registerCorsConfiguration("/**", configuration);
//        return source;
//    }
//
//}




//
//    @PostMapping("/signup")
//    public ResponseEntity<Object> register(@RequestBody RegisterUserDto registerUserDto, HttpServletRequest request) {
//        System.out.println("POST request to /auth/signup");
//
//        // Your registration logic here
//        User registeredUser = authenticationService.signup(registerUserDto);
//
//        // Generate a CSRF token
//        CsrfToken csrfToken = new DefaultCsrfToken("X-CSRF-TOKEN", "_csrf", "abc123"); // Replace "abc123" with your actual CSRF token
//
//        // Return the registered user and CSRF token in the response body
//        Map<String, Object> responseBody = new HashMap<>();
//        responseBody.put("user", registeredUser);
//        responseBody.put("csrfToken", csrfToken.getToken());
//
//        return ResponseEntity.ok().body(responseBody);
//    }

